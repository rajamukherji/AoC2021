let Input := file(Args[1], "r")

let Queue := queue()

var Pos1 := integer(Input:read:after(":"):trim)
var Pos2 := integer(Input:read:after(":"):trim)

let Rolls := {}
for Move in grid(1 .. 3, 1 .. 3, 1 .. 3, +) do
	Rolls[Move, fun 0] := old + 1
end

let Initial := (Pos1, 0, Pos2, 0, 1)
Queue:insert(Initial, 0)
let Counts := {Initial is 1}

var Wins1 := 0
var Wins2 := 0

loop
	let State := (while Queue:next):value
	print('State = {State} x {Counts[State]}\n')
	let (Pos1, Score1, Pos2, Score2, Player) := State
	if Player = 1 then
		for Move, Count0 in Rolls do
			let Count := Count0 * Counts[State]
			let Pos := (Pos1 + Move - 1) % 10 + 1
			let Score := Score1 + Pos
			if Score >= 21 then
				Wins1 := old + Count
			else
				let Next := (Pos, Score, Pos2, Score2, 2)
				if Counts:missing(Next;) Count then
					Queue:insert(Next, -(Score + Score2))
				else
					Counts[Next] := old + Count
				end
			end
		end
	else
		for Move, Count0 in Rolls do
			let Count := Count0 * Counts[State]
			let Pos := (Pos2 + Move - 1) % 10 + 1
			let Score := Score2 + Pos
			if Score >= 21 then
				Wins2 := old + Count
			else
				let Next := (Pos1, Score1, Pos, Score, 1)
				if Counts:missing(Next;) Count then
					Queue:insert(Next, -(Score1 + Score))
				else
					Counts[Next] := old + Count
				end
			end
		end
	end
end

print("\n")
print('Wins1 = {Wins1}\n')
print('Wins2 = {Wins2}\n')
