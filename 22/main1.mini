class: cube(:x1, :x2, :y1, :y2, :z1, :z2)

fun split(A1, A2, B1, B2) do
	let R := []
	if A2 < B1 or A1 > B2 then
		R:put((A1, A2, 0))
	elseif A1 < B1 then
		R:put((A1, B1 - 1, 0))
		if B2 < A2 then
			R:put((B1, B2, 1))
			R:put((B2 + 1, A2, 0))
		else
			R:put((B1, A2, 1))
		end
	elseif B2 < A2 then
		R:put((A1, B2, 1))
		R:put((B2 + 1, A2, 0))
	else
		R:put((A1, A2, 1))
	end
	ret R
end

meth -(A: cube, B: cube): list[cube] do
	let RX := split(A:x1, A:x2, B:x1, B:x2)
	let RY := split(A:y1, A:y2, B:y1, B:y2)
	let RZ := split(A:z1, A:z2, B:z1, B:z2)
	let Cubes := []
	each grid(RX, RY, RZ; X, Y, Z) do
		if X[3] + Y[3] + Z[3] < 3 then
			Cubes:put(cube(X[1], X[2], Y[1], Y[2], Z[1], Z[2]))
		end
	end
	ret Cubes
end

let On := []
let Input := file(Args[1], "r")
loop
	let Match := Input:read % r"(on|off) x=([-0-9]+)..([-0-9]+),y=([-0-9]+)..([-0-9]+),z=([-0-9]+)..([-0-9]+)\n"
	while Match
	let Cube := cube(integer(Match[3]), integer(Match[4]), integer(Match[5]), integer(Match[6]), integer(Match[7]), integer(Match[8]))
	for M in [:x1, :x2, :y1, :y2, :z1, :z2] do
		-50 <= M(Cube) <= 50 or exit next
	end
	for Cube2 in On:splice do
		let Cubes := Cube2 - Cube
		On:grow(Cubes)
	end
	if Match[2] = "on" then
		On:put(Cube)
	end
end

let Sum := sum(On; Cube) do
	print('Cube = {Cube}\n')
	(Cube:x2 + 1 - Cube:x1) * (Cube:y2 + 1 - Cube:y1) * (Cube:z2 + 1 - Cube:z1)
end

print('Sum = {Sum}\n')
